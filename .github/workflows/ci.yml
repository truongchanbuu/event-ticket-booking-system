name: CI - Check code & test

on:
  pull_request:
    branches: [develop, staging, main]
  push:
    branches: [main, develop]

env:
  NODE_VERSION: "20"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed services
        id: filter
        uses: dorny/paths-filter@v3
        with:
          base: "develop"
          filters: |
            auth:
              - 'auth/**'
            ticket:
              - 'ticket/**'
            payment:
              - 'payment/**'
            notification:
              - 'notification/**'
            event:
              - 'event/**'
            analysis:
              - 'analysis/**'

      - name: Set matrix
        id: set-matrix
        run: |
          SERVICES=()
          [[ "${{ steps.filter.outputs.auth }}" == "true" ]] && SERVICES+=("auth")
          [[ "${{ steps.filter.outputs.ticket }}" == "true" ]] && SERVICES+=("ticket")
          [[ "${{ steps.filter.outputs.payment }}" == "true" ]] && SERVICES+=("payment")
          [[ "${{ steps.filter.outputs.notification }}" == "true" ]] && SERVICES+=("notification")
          [[ "${{ steps.filter.outputs.event }}" == "true" ]] && SERVICES+=("event")
          [[ "${{ steps.filter.outputs.analysis }}" == "true" ]] && SERVICES+=("analysis")

          # Kiểm tra nếu không có service nào thay đổi
          if [ ${#SERVICES[@]} -eq 0 ]; then
            MATRIX='{"include":[]}'
          else
            # Tạo JSON matrix từ danh sách services
            MATRIX=$(printf '%s\n' "${SERVICES[@]}" | jq -R . | jq -s '{include: [.[] | {service: .}]}')
          fi

          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Generated matrix: $MATRIX"

  check-services:
    name: Check ${{ matrix.include }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '{"include":[]}' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ${{ matrix.include }}/package-lock.json

      - name: Detect changed services
        id: filter
        run: |
          echo "Checking changed directories..."
          changed=$(git diff --name-only origin/main...HEAD | cut -d/ -f1 | sort -u)
          echo "Changed: $changed"

          services=""
          for dir in auth ticket payment notification event analysis; do
            if echo "$changed" | grep -q "^$dir$"; then
              services="$services\"$dir\","
            fi
          done

          services="[${services%,}]"
          echo "Detected services: $services"
          echo "affected_services=$services" >> $GITHUB_OUTPUT

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ matrix.include }}

      - name: Check code (Lint)
        run: npm run lint
        working-directory: ${{ matrix.include }}

      - name: Check format code
        run: npm run format:check
        working-directory: ${{ matrix.include }}
        continue-on-error: true

      - name: Run tests
        run: npm test
        working-directory: ${{ matrix.include }}
        env:
          NODE_ENV: test
          FIRESTORE_EMULATOR_HOST: localhost:8080
          GCLOUD_PROJECT: test-project
          # Nếu cần Firebase Emulator thật sự thì bạn nên thêm setup step ở đây

      - name: Check Security
        run: npm audit --audit-level moderate
        working-directory: ${{ matrix.include }}
        continue-on-error: true

  notify-result:
    name: Notify result
    runs-on: ubuntu-latest
    needs:
      - detect-changes
    if: always()
    steps:
      - name: Check result
        run: |
          echo "=== JOB RESULTS ==="
          echo "detect-changes: ${{ needs.detect-changes.result }}"

          # Kiểm tra nếu có job nào failed
          if [[ "${{ needs.detect-changes.result }}" == "failure" ]]; then
            echo "❌ One or more jobs failed!"
            exit 1
          elif [[ "${{ needs.detect-changes.result }}" == "cancelled" ]]; then
            echo "⚠️ One or more jobs were cancelled!"
            exit 1
          else
            echo "✅ All jobs completed successfully!"
          fi
