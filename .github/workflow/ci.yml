name: CI - Check code & test

on:
  pull_request:
    branches: [develop, staging, main]
  push:
    branches: [main, develop]

env:
  NODE_VERSION: "20"

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect changed services
        id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            auth:
              - 'auth/**'
            ticket:
              - 'ticket/**'
            payment:
              - 'payment/**'
            notification:
              - 'notification/**'
            event:
              - 'event/**'
            analysis:
              - 'analysis/**'

      - name: Set matrix
        id: set-matrix
        run: |
          SERVICES=()
          [[ "${{ steps.filter.outputs.auth }}" == "true" ]] && SERVICES+=('"auth"')
          [[ "${{ steps.filter.outputs.ticket }}" == "true" ]] && SERVICES+=('"ticket"')
          [[ "${{ steps.filter.outputs.payment }}" == "true" ]] && SERVICES+=('"payment"')
          [[ "${{ steps.filter.outputs.notification }}" == "true" ]] && SERVICES+=('"notification"')
          [[ "${{ steps.filter.outputs.event }}" == "true" ]] && SERVICES+=('"event"')
          [[ "${{ steps.filter.outputs.analysis }}" == "true" ]] && SERVICES+=('"analysis"')
          MATRIX="{\"include\":[ $(IFS=, ; echo "${SERVICES[*]}") ]}"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  check-services:
    name: Check ${{ matrix.include }}
    runs-on: ubuntu-latest
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.matrix != '{"include":[]}' }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          cache-dependency-path: ${{ matrix.include }}/package-lock.json

      - name: Install dependencies
        run: npm ci
        working-directory: ${{ matrix.include }}

      - name: Check code (Lint)
        run: npm run lint
        working-directory: ${{ matrix.include }}

      - name: Check format code
        run: npm run format:check
        working-directory: ${{ matrix.include }}
        continue-on-error: true

      - name: Run tests
        run: npm test
        working-directory: ${{ matrix.include }}
        env:
          NODE_ENV: test
          FIRESTORE_EMULATOR_HOST: localhost:8080
          GCLOUD_PROJECT: test-project
          # Nếu cần Firebase Emulator thật sự thì bạn nên thêm setup step ở đây

      - name: Check Security
        run: npm audit --audit-level moderate
        working-directory: ${{ matrix.include }}
        continue-on-error: true

  notify-result:
    name: Notify result
    runs-on: ubuntu-latest
    needs: [check-services]
    if: always()

    steps:
      - name: Check result
        run: |
          if [ "${{ needs.check-services.result }}" == "success" ]; then
            echo "✅ All services passed!"
          else
            echo "❌ A service has been failed!"
            exit 1
          fi
