services:
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka # Thêm container name cố định
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_NODE_ID=${KAFKA_NODE_ID}
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=${KAFKA_NODE_ID}@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - event-ticket-booking-system-network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=${KAFKA_BROKER}
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - event-ticket-booking-system-network

  redis:
    image: redis:alpine
    container_name: redis
    ports:
      - "${REDIS_PORT}:6379"
    networks:
      - event-ticket-booking-system-network

  redis-commander:
    image: rediscommander/redis-commander:latest
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - event-ticket-booking-system-network

  auth-service:
    build:
      context: .
      dockerfile: auth/Dockerfile.dev
    env_file:
      - .env
      - ./auth/.env
    ports:
      - "${AUTH_PORT}:3000"
    volumes:
      - ${FIREBASE_KEY_PATH}:${FIREBASE_CREDENTIALS}:ro
    environment:
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_HOST=${REDIS_HOST}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - event-ticket-booking-system-network

  ticket-service:
    build:
      context: .
      dockerfile: ticket/Dockerfile.dev
    env_file:
      - .env
      - ./ticket/.env
    ports:
      - "${TICKET_PORT}:3000"
    volumes:
      - ./firebase:/app/firebase
    environment:
      - FIREBASE_CREDENTIALS=${FIREBASE_CREDENTIALS}
      - KAFKA_BROKER=${KAFKA_BROKER}
      - REDIS_HOST=${REDIS_HOST}
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - event-ticket-booking-system-network

  payment-service:
    build:
      context: .
      dockerfile: payment/Dockerfile.dev
    ports:
      - "${PAYMENT_PORT}:3000"
    volumes:
      - ${FIREBASE_KEY_PATH}:${FIREBASE_CREDENTIALS}:ro
    env_file:
      - .env
      - ./payment/.env
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - event-ticket-booking-system-network

  analysis-service:
    build:
      context: .
      dockerfile: analysis/Dockerfile.dev
    env_file:
      - .env
      - ./analysis/.env
    ports:
      - "${ANALYSIS_PORT}:3000"
    volumes:
      - ${FIREBASE_KEY_PATH}:${FIREBASE_CREDENTIALS}:ro
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - event-ticket-booking-system-network

  event-service:
    build:
      context: .
      dockerfile: event/Dockerfile.dev
    env_file:
      - .env
      - ./event/.env
    ports:
      - "${EVENT_PORT}:3000"
    volumes:
      - ${FIREBASE_KEY_PATH}:${FIREBASE_CREDENTIALS}:ro
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - event-ticket-booking-system-network

  notification-service:
    build:
      context: .
      dockerfile: notification/Dockerfile.dev
    env_file:
      - .env
      - ./notification/.env
    ports:
      - "${NOTIFICATION_PORT}:3000"
    volumes:
      - ${FIREBASE_KEY_PATH}:${FIREBASE_CREDENTIALS}:ro
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - event-ticket-booking-system-network

networks:
  event-ticket-booking-system-network:
    driver: bridge
